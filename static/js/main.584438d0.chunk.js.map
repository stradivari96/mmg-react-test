{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["draw","ctx","radius","time","drawFace","drawNumbers","drawTime","grad","beginPath","arc","Math","PI","fillStyle","fill","createRadialGradient","addColorStop","strokeStyle","lineWidth","stroke","ang","num","font","textBaseline","textAlign","rotate","translate","fillText","toString","now","hour","hours","minute","minutes","second","seconds","drawHand","pos","length","width","lineCap","moveTo","lineTo","Canvas","props","canvasRef","useRef","useEffect","canvas","current","context","getContext","height","ref","ALARMS_URL","App","useState","moment","setTime","alarms","setAlarms","tz","guess","timezone","a","fetch","response","json","fetchAlarms","setInterval","checkAlarms","alerts","filter","active","forEach","split","map","Number","alarmHour","alarmMinute","push","message","Swal","queue","className","Clock","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.584438d0.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { Moment } from \"moment-timezone\";\n\n// This clock is based on the tutorial from w3schools\n// see: https://www.w3schools.com/graphics/canvas_clock.asp\n\nconst draw = (ctx: CanvasRenderingContext2D, radius: number, time: Moment) => {\n  drawFace(ctx, radius);\n  drawNumbers(ctx, radius);\n  drawTime(ctx, radius, time);\n};\n\nconst drawFace = (ctx: CanvasRenderingContext2D, radius: number) => {\n  let grad;\n\n  ctx.beginPath();\n  ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = \"white\";\n  ctx.fill();\n\n  grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);\n  grad.addColorStop(0, \"#333\");\n  grad.addColorStop(0.5, \"white\");\n  grad.addColorStop(1, \"#333\");\n  ctx.strokeStyle = grad;\n  ctx.lineWidth = radius * 0.1;\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);\n  ctx.fillStyle = \"#333\";\n  ctx.fill();\n};\n\nconst drawNumbers = (ctx: CanvasRenderingContext2D, radius: number) => {\n  var ang;\n  var num;\n  ctx.font = radius * 0.15 + \"px arial\";\n  ctx.textBaseline = \"middle\";\n  ctx.textAlign = \"center\";\n  for (num = 1; num < 13; num++) {\n    ang = (num * Math.PI) / 6;\n    ctx.rotate(ang);\n    ctx.translate(0, -radius * 0.85);\n    ctx.rotate(-ang);\n    ctx.fillText(num.toString(), 0, 0);\n    ctx.rotate(ang);\n    ctx.translate(0, radius * 0.85);\n    ctx.rotate(-ang);\n  }\n};\n\nconst drawTime = (\n  ctx: CanvasRenderingContext2D,\n  radius: number,\n  now: Moment\n) => {\n  var hour = now.hours();\n  var minute = now.minutes();\n  var second = now.seconds();\n  //hour\n  hour = hour % 12;\n  hour =\n    (hour * Math.PI) / 6 +\n    (minute * Math.PI) / (6 * 60) +\n    (second * Math.PI) / (360 * 60);\n  drawHand(ctx, hour, radius * 0.5, radius * 0.07);\n  //minute\n  minute = (minute * Math.PI) / 30 + (second * Math.PI) / (30 * 60);\n  drawHand(ctx, minute, radius * 0.8, radius * 0.07);\n  // second\n  second = (second * Math.PI) / 30;\n  drawHand(ctx, second, radius * 0.9, radius * 0.02);\n};\n\nconst drawHand = (\n  ctx: CanvasRenderingContext2D,\n  pos: number,\n  length: number,\n  width: number\n) => {\n  ctx.beginPath();\n  ctx.lineWidth = width;\n  ctx.lineCap = \"round\";\n  ctx.moveTo(0, 0);\n  ctx.rotate(pos);\n  ctx.lineTo(0, -length);\n  ctx.stroke();\n  ctx.rotate(-pos);\n};\n\nconst Canvas = (props: any) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas: any = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    let radius = canvas.height / 2;\n    context.translate(radius, radius);\n    radius = radius * 0.9;\n\n    draw(context, radius, props.time);\n  }, []);\n\n  useEffect(() => {\n    const canvas: any = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    let radius = canvas.height / 2;\n    radius = radius * 0.9;\n\n    draw(context, radius, props.time);\n  }, [draw, props.time]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default Canvas;\n","import React, { useState, useEffect } from \"react\";\nimport Swal from \"sweetalert2\";\nimport moment from \"moment-timezone\";\n\nimport Clock from \"./components/Clock\";\n\nimport \"./App.css\";\n\nconst ALARMS_URL =\n  \"https://raw.githubusercontent.com/medlabmg/developers-tests/master/frontend/alarm.json\";\n\ntype Alarm = {\n  id: number;\n  time: string;\n  message: string;\n  active: boolean;\n};\n\nfunction App() {\n  const [time, setTime] = useState(moment());\n  const [alarms, setAlarms] = useState<Alarm[]>([]);\n  const [timezone, setTimezone] = useState(moment.tz.guess());\n\n  useEffect(() => {\n    async function fetchAlarms() {\n      let response: any = await fetch(ALARMS_URL);\n      response = await response.json();\n      setAlarms(response);\n    }\n    fetchAlarms();\n    setInterval(() => setTime(moment().tz(timezone)), 1000);\n  }, []);\n\n  useEffect(() => {\n    if (time.seconds() === 0) checkAlarms();\n  }, [time]);\n\n  const checkAlarms = () => {\n    const hour = time.hours();\n    const minute = time.minutes();\n    const alerts: string[] = [];\n    alarms\n      .filter((a) => a.active)\n      .forEach((a) => {\n        const [alarmHour, alarmMinute] = a.time.split(\":\").map(Number);\n        if (alarmHour === hour && alarmMinute === minute)\n          alerts.push(a.message);\n      });\n    Swal.queue(alerts);\n  };\n\n  return (\n    <div className=\"App\">\n      <Clock time={time} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}