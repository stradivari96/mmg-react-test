{"version":3,"sources":["components/Clock.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["drawFace","ctx","radius","beginPath","arc","Math","PI","fillStyle","fill","lineWidth","stroke","drawNumbers","ang","num","font","textBaseline","textAlign","rotate","translate","fillText","toString","drawTime","now","hour","hours","minute","minutes","second","seconds","drawHand","pos","length","width","lineCap","moveTo","lineTo","Canvas","props","canvasRef","useRef","useEffect","canvas","current","context","getContext","height","time","draw","ref","className","Header","style","userSelect","ALARMS_URL","App","useState","moment","setTime","alarms","setAlarms","tz","guess","timezone","setTimezone","a","fetch","response","json","fetchAlarms","interval","setInterval","clearInterval","alerts","filter","split","map","Number","alarmHour","alarmMinute","active","message","Swal","queue","Autocomplete","options","names","renderInput","params","TextField","label","variant","value","onChange","event","Clock","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f449f75.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { Moment } from \"moment-timezone\";\n\n// This clock is based on the tutorial from w3schools\n// see: https://www.w3schools.com/graphics/canvas_clock.asp\n\nconst draw = (ctx: CanvasRenderingContext2D, radius: number, time: Moment) => {\n  drawFace(ctx, radius);\n  drawNumbers(ctx, radius);\n  drawTime(ctx, radius, time);\n};\n\nconst drawFace = (ctx: CanvasRenderingContext2D, radius: number) => {\n  ctx.beginPath();\n  ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n  ctx.fillStyle = \"white\";\n  ctx.fill();\n\n  ctx.lineWidth = radius * 0.1;\n  ctx.stroke();\n\n  ctx.beginPath();\n  ctx.arc(0, 0, radius * 0.1, 0, 2 * Math.PI);\n  ctx.fillStyle = \"#333\";\n  ctx.fill();\n};\n\nconst drawNumbers = (ctx: CanvasRenderingContext2D, radius: number) => {\n  let ang;\n  let num;\n  ctx.font = radius * 0.15 + \"px arial\";\n  ctx.textBaseline = \"middle\";\n  ctx.textAlign = \"center\";\n  for (num = 1; num < 13; num++) {\n    ang = (num * Math.PI) / 6;\n    ctx.rotate(ang);\n    ctx.translate(0, -radius * 0.85);\n    ctx.rotate(-ang);\n    ctx.fillText(num.toString(), 0, 0);\n    ctx.rotate(ang);\n    ctx.translate(0, radius * 0.85);\n    ctx.rotate(-ang);\n  }\n};\n\nconst drawTime = (\n  ctx: CanvasRenderingContext2D,\n  radius: number,\n  now: Moment\n) => {\n  let hour = now.hours();\n  let minute = now.minutes();\n  let second = now.seconds();\n  //hour\n  hour = hour % 12;\n  hour =\n    (hour * Math.PI) / 6 +\n    (minute * Math.PI) / (6 * 60) +\n    (second * Math.PI) / (360 * 60);\n  drawHand(ctx, hour, radius * 0.5, radius * 0.07);\n  //minute\n  minute = (minute * Math.PI) / 30 + (second * Math.PI) / (30 * 60);\n  drawHand(ctx, minute, radius * 0.8, radius * 0.07);\n  // second\n  second = (second * Math.PI) / 30;\n  drawHand(ctx, second, radius * 0.9, radius * 0.02);\n};\n\nconst drawHand = (\n  ctx: CanvasRenderingContext2D,\n  pos: number,\n  length: number,\n  width: number\n) => {\n  ctx.beginPath();\n  ctx.lineWidth = width;\n  ctx.lineCap = \"round\";\n  ctx.moveTo(0, 0);\n  ctx.rotate(pos);\n  ctx.lineTo(0, -length);\n  ctx.stroke();\n  ctx.rotate(-pos);\n};\n\nconst Canvas = (props: any) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas: any = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const radius = canvas.height / 2;\n    context.translate(radius, radius);\n  }, []);\n\n  useEffect(() => {\n    const canvas: any = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n    const radius = (canvas.height / 2) * 0.9;\n\n    draw(context, radius, props.time);\n  }, [props.time]);\n\n  return <canvas ref={canvasRef} className=\"clock\" width={500} height={500} />;\n};\n\nexport default Canvas;\n","import React from \"react\";\n\nconst Header = () => (\n  <div>\n    <h1 style={{ userSelect: \"none\" }}>React analog clock</h1>\n  </div>\n);\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport Swal from \"sweetalert2\";\nimport moment from \"moment-timezone\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nimport Clock from \"./components/Clock\";\nimport Header from \"./components/Header\";\n\nimport \"./App.css\";\n\nconst ALARMS_URL =\n  \"https://raw.githubusercontent.com/medlabmg/developers-tests/master/frontend/alarm.json\";\n\ntype Alarm = {\n  id: number;\n  time: string;\n  message: string;\n  active: boolean;\n};\n\nfunction App() {\n  const [time, setTime] = useState(moment());\n  const [alarms, setAlarms] = useState<Alarm[]>([]);\n  const [timezone, setTimezone] = useState<string>(moment.tz.guess());\n\n  useEffect(() => {\n    async function fetchAlarms() {\n      let response: any = await fetch(ALARMS_URL);\n      response = await response.json();\n      setAlarms(response);\n    }\n    fetchAlarms();\n  }, []);\n\n  useEffect(() => {\n    setTime(moment().tz(timezone));\n    const interval = setInterval(() => setTime(moment().tz(timezone)), 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [timezone]);\n\n  useEffect(() => {\n    if (time.seconds() === 0) {\n      const hour = time.hours();\n      const minute = time.minutes();\n      const alerts = alarms\n        .filter((a) => {\n          let [alarmHour, alarmMinute] = a.time.split(\":\").map(Number);\n          return a.active && alarmHour === hour && alarmMinute === minute;\n        })\n        .map((a) => a.message);\n      Swal.queue(alerts);\n    }\n  }, [time, alarms]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Autocomplete\n        className=\"timezone\"\n        options={moment.tz.names()}\n        renderInput={(params) => (\n          <TextField {...params} label=\"Timezone\" variant=\"outlined\" />\n        )}\n        value={timezone}\n        onChange={(event, value) =>\n          value ? setTimezone(value) : setTimezone(moment.tz.guess())\n        }\n      />\n      <Clock time={time} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}